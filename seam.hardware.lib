//############################################################# hardware.lib ###
//
// A library for real word hardware connection. Its official prefix is `ha`.
//
// * AUDIO INTERFACE
// * MIDI
// *
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "Faust Hardware Interface Library";
declare version "0.1";
declare author "Giuseppe Silvi and Davide Tedesco";
declare license "CC4";

shw = library("seam.hardware.lib");

//==================================================================== LOGIC ===
//==============================================================================
//-------------------------------------------- INPUT CHANNEL GENERIC CONTROL ---
//-------------------------------------------- SELECT THE HARDWARE INTERFACE ---

//============================ RME FireFace 800 ================================
chstrip_ff800 = vgroup("[01] INPUT CHANNEL", ff800 : smx.inpeq);
lrstrip_ff800 = vgroup("[01] STEREO INPUT CHANNEL", ff800_ST : smx.inpeq, smx.inpeq);
wxyzrip_ff800 = vgroup("[01] B-FORMAT INPUT CHANNEL", ff800_WXYZ : smx.inpeq, smx.inpeq, smx.inpeq, smx.inpeq);

// da studiare per outsel
//selectoutn(n, s) = _ <: par(i, n, *(s==i));
//========================================================== AUDIO INTERFACE ===
//==============================================================================
//--------------------------------------- RME FireFace 800 - MONO INPUT SELECTOR
//-------------------------------------------------------------------- 20 INPUTS
ff800 = ba.selectn(20,channel) : san.phmeter
  with{
    channel = nentry("[01] RME FF800 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1':0;
      'Analog IN 2':1;
      'Analog IN 3':2;
      'Analog IN 4':3;
      'Analog IN 5':4;
      'Analog IN 6':5;
      'Analog IN 7':6;
      'Analog IN 8':7;
      'Analog IN 9':8;
      'Analog IN 10':9;
      'SPDIF IN 1':10;
      'SPDIF IN 2':11;
      'ADAT IN 1':12;
      'ADAT IN 2':13;
      'ADAT IN 3':14;
      'ADAT IN 4':15;
      'ADAT IN 5':16;
      'ADAT IN 6':17;
      'ADAT IN 7':18;
      'ADAT IN 8':19
      }]", 0, 0, 20, 1) : int;
  };

//------------------------------------- RME FireFace 800 - STEREO INPUT SELECTOR
//-------------------------------------------------------------------- 18 INPUTS
ff800_ST = si.bus(18) <: ba.selectn(18,lchannel),
                         ba.selectn(18,rchannel) : san.phmeter, san.phmeter
  with{
    rchannel = lchannel+(1);
    lchannel = nentry("[01] RME FF800 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1-2':0;
      'Analog IN 3-4':2;
      'Analog IN 5-6':4;
      'Analog IN 7-8':6;
      'Analog IN 9-10':8;
      'ADAT IN 1-2':10;
      'ADAT IN 3-4':12;
      'ADAT IN 5-6':14;
      'ADAT IN 7-8':16
      }]", 0, 0, 18, 1) : int;
  };

//--------------------------------------- RME FireFace 800 - WXYZ INPUT SELECTOR
//-------------------------------------------------------------------- 18 INPUTS
ff800_WXYZ = si.bus(18) <:
  ba.selectn(18,wchannel), ba.selectn(18,xchannel), ba.selectn(18,ychannel),
  ba.selectn(18,zchannel) : san.phmeter, san.phmeter, san.phmeter, san.phmeter
  with{
    zchannel = ychannel+(1);
    ychannel = xchannel+(1);
    xchannel = wchannel+(1);
    wchannel = nentry("[01] RME FF800 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1-2-3-4':0;
      'Analog IN 5-6-7-8':4;
      'ADAT IN 1-2-3-4':10;
      'ADAT IN 5-6-7-8':14
      }]", 0, 0, 18, 1) : int;
  };

//-------------------------------------------- RME FireFace UFX - INPUT SELECTOR
// insel = ba.selectn(18,channel) : hmeter : _
//   with{
//     hmeter(x)		= attach(x, an.amp_follower(0.150, x) : ba.linear2db : hbargraph("[02] METER [unit:dB]", -70, +5));
//     envelop = abs : max ~ -(1.0/ma.SR) : max(ba.db2linear(-70)) : ba.linear2db;
//     channel = nentry("[01] Input Channel Selector
//                     [style:menu{'Analog IN 1':0;
//                     'Analog IN 2':1;
//                     'Analog IN 3':2;
//                     'Analog IN 4':3;
//                     'Analog IN 5':4;
//                     'Analog IN 6':5;
//                     'Analog IN 7':6;
//                     'Analog IN 8':7;
//                     'Analog IN 9':8;
//                     'Analog IN 10':9;
//                     'ADAT IN 1':10;
//                     'ADAT IN 2':11;
//                     'ADAT IN 3':12;
//                     'ADAT IN 4':13;
//                     'ADAT IN 5':14;
//                     'ADAT IN 6':15;
//                     'ADAT IN 7':16;
//                     'ADAT IN 8':17}]", 0, 0, 18, 1) : int;
//   };

//============================ Focusrite Scarlett 18i8 =========================
chstrip_s18i8 = vgroup("[01] INPUT CHANNEL", s18i8 : inpeq);
lrstrip_s18i8 = vgroup("[01] STEREO INPUT CHANNEL", s18i8_ST : inpeq, inpeq);
wxyzrip_s18i8 = vgroup("[01] B-FORMAT INPUT CHANNEL", s18i8_WXYZ : inpeq, inpeq, inpeq, inpeq);
//========================================================== AUDIO INTERFACE ===
//==============================================================================
//-------------------------------- Focusrite Scarlett 18i8 - MONO INPUT SELECTOR
//-------------------------------------------------------------------- 18 INPUTS
s18i8 = ba.selectn(18,channel) : san.phmeter
  with{
    channel = nentry("[01] Focusrite Scarlett 18i8 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1':0;
      'Analog IN 2':1;
      'Analog IN 3':2;
      'Analog IN 4':3;
      'Analog IN 5':4;
      'Analog IN 6':5;
      'Analog IN 7':6;
      'Analog IN 8':7;
      'SPDIF IN 1':8;
      'SPDIF IN 2':9;
      'ADAT IN 1':10;
      'ADAT IN 2':11;
      'ADAT IN 3':12;
      'ADAT IN 4':13;
      'ADAT IN 5':14;
      'ADAT IN 6':15;
      'ADAT IN 7':16;
      'ADAT IN 8':17
      }]", 0, 0, 18, 1) : int;
  };
//------------------------------ Focusrite Scarlett 18i8 - STEREO INPUT SELECTOR
//-------------------------------------------------------------------- 16 INPUTS
s18i8_ST = si.bus(16) <: ba.selectn(16,lchannel),
                         ba.selectn(16,rchannel) : san.phmeter, san.phmeter
  with{
    rchannel = lchannel+(1);
    lchannel = nentry("[01] Focusrite Scarlett 18i8 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1-2':0;
      'Analog IN 3-4':2;
      'Analog IN 5-6':4;
      'Analog IN 7-8':6;
      'ADAT IN 1-2':8;
      'ADAT IN 3-4':10;
      'ADAT IN 5-6':12;
      'ADAT IN 7-8':14
      }]", 0, 0, 16, 1) : int;
  };
//-------------------------------- Focusrite Scarlett 18i8 - WXYZ INPUT SELECTOR
//-------------------------------------------------------------------- 16 INPUTS
s18i8_WXYZ = si.bus(16) <:
  ba.selectn(16,wchannel), ba.selectn(16,xchannel), ba.selectn(16,ychannel),
  ba.selectn(16,zchannel) : san.phmeter, san.phmeter, san.phmeter, san.phmeter
  with{
    zchannel = ychannel+(1);
    ychannel = xchannel+(1);
    xchannel = wchannel+(1);
    wchannel = nentry("[01] Focusrite Scarlett 18i8 - INPUT SELECTOR
      [style:menu{
      'Analog IN 1-2-3-4':0;
      'Analog IN 5-6-7-8':4;
      'ADAT IN 1-2-3-4':10;
      'ADAT IN 5-6-7-8':14
      }]", 0, 0, 16, 1) : int;
  };
//===================================================================== MIDI ===
//==============================================================================
//--------------------------------------------------------------------- MIDI GUI
//----------------------------------------------------------- BEHRINGER BCF 2000
g81 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g82 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g83 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g84 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g85 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g86 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g87 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;
g88 = vslider("[08] [midi:ctrl 88]", 0, -70, +6, 0.1) : ba.db2linear : si.smoo;

//Ctrl Chan tester (ctrl chan): tester(midi in, midi out)
// controlchantester = vgroup("CTRL CHAN IN/OUT", valuetest(81,1,81,1))
// with{
// valuetest(i,ic,o,oc) = hslider("Ctrl Value IN (Ctrl %i Channel %ic) [midi:ctrl %i %ic]", 60, 0, 127, 1) :
//                        hbargraph("Ctrl Value OUT (Ctrl %o) Channel OUT(Chan %oc) [midi:ctrl %o %oc]", 0, 127);
// };
//
// process = controlchantester;

bcf2000 = hgroup("BEHRINGER BCF 2000", par(i, 8, channel(i)))
  with{
    knob1(v) = vslider("[01][style:knob] Knob %f [midi:ctrl %f]", 0,0,127,1)
      with{f = v+(1);};
    pushknob1(v) = checkbox("[02]Push Knob %f [midi:ctrl %f]")
      with{f = v+(33);};
    knob2(v) = vslider("[03][style:knob] Knob %f [midi:ctrl %f]", 0,0,127,1)
      with{f = v+(9);};
    pushknob2(v) = checkbox("[04]Push Knob %f [midi:ctrl %f]")
      with{f = v+(41);};
    knob3(v) = vslider("[05][style:knob] Knob %f [midi:ctrl %f]", 0,0,127,1)
      with{f = v+(17);};
    pushknob3(v) = checkbox("[06]Push Knob %f [midi:ctrl %f]")
      with{f = v+(49);};
    knob4(v) = vslider("[07][style:knob] Knob %f [midi:ctrl %f]", 0,0,127,1)
      with{f = v+(25);};
    pushknob4(v) = checkbox("[08]Push Knob %f [midi:ctrl %f]")
      with{f = v+(57);};
    button1(v) = checkbox("[09]Button %f [midi:ctrl %f]")
      with{f = v+(65);};
    button2(v) = checkbox("[10]Button %f [midi:ctrl %f]")
      with{f = v+(73);};
    fader(v) = vslider("[11]ctrl %f [midi:ctrl %f]", 0,0,127,1)
      with{f = v+(81);};
    channel(v) = vgroup("ch %f", knob1(v), pushknob1(v), knob2(v), pushknob2(v), knob3(v), pushknob3(v),  knob4(v), pushknob4(v), button1(v), button2(v), fader(v))
      with{f = v+(81);};
};
// process = bcf2000;

miditester = hgroup("MIDITESTER", par(i, 127, fader(i)))
  with{
    fader(v) = vslider("ctrl %3f [midi:ctrl %3f]", 0,0,127,1)
      with{f = v+(1);};
};

// the following code is dragged here to the VCS3 monosinth
///////////////////////////////////////////////////////////////////////////////
// declare author "Bart Brouns";
// declare license "GPLv3";
// declare name "lastNote";
// declare options "[midi:on]";
// import("stdfaust.lib");
///////////////////////////////////////////////////////////////////////////////
//           give the number of the last note played                         //
///////////////////////////////////////////////////////////////////////////////
// process =
//   os.osc(lastNote:ba.pianokey2hz)
// // increases the cpu-usage, from 7% to 11%
// * (vel(lastNote)/127)
// // no velocity:
// // * (nrNotesPlaying>0)
// ;

nrNotesPlaying = 0: seq(i, nrNotes, noteIsOn(i),_:+);
noteIsOn(i) = velocity(i)>0;

vel(x) =  par(i, nrNotes, velocity(i)*(i==x)):>_ ;
velocity(i) = hslider("velocity of note %i [midi:key %i ]", 0, 0, nrNotes, 1);
nrNotes = 127; // nr of midi notes
// nrNotes = 32; // for block diagram

lastNote = par(i, nrNotes, i,index(i)):find_max_index(nrNotes):(_,!)
with {
  // an index to indicate the order of the note
  // it adds one for every additional note played
  // it resets to 0 when there are no notes playing
  // assume multiple notes can start at once
  orderIndex = ((_+((nrNotesPlaying-nrNotesPlaying'):max(0))) * (nrNotesPlaying>1))~_;

  // the order index of note i
  // TODO: when multiple notes start at the same time, give each a unique index
  index(i) = orderIndex:(select2(noteStart(i),_,_)
                         :select2(noteEnd(i)+(1:ba.impulsify),_,-1))~_;

  // we use this instead of:
  // hslider("frequency[midi:keyon 62]",0,0,nrNotes,1)
  // because keyon can come multiple times, and we only want the first
  noteStart(i) = noteIsOn(i):ba.impulsify;
  noteEnd(i) = (noteIsOn(i)'-noteIsOn(i)):max(0):ba.impulsify;
  //or do we?
  // noteStart(i) = (hslider("keyon[midi:keyon %i]",0,0,nrNotes,1)>0) :ba.impulsify;
  // at the very least, the first implementation of noteStart(i) doesn't add another 127 sliders

  // from Julius Smith's acor.dsp:
  index_comparator(n,x,m,y) = select2((x>y),m,n), select2((x>y),y,x); // compare integer-labeled signals
  // take N number-value pairs and give the number with the maximum value
  find_max_index(N) = seq(i,N-2, (index_comparator,si.bus(2*(N-i-2)))) : index_comparator;
};

san = library("seam.analyzers.lib");
smx = library("seam.mixer.lib");

aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
