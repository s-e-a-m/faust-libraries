sre = library("seam.reverbs.lib");
//
// CONTENTS
// * SCHROEDER
// * MOORER
// * DATTORRO
//
//============= SCHROEDER - NATURAL SOUNDING ARTIFICIAL REVERBERATION - 1962 ===
//==============================================================================
//--------------------------------------------------- DELAY FEEDBACK IN LOOP ---
dfl(t,g) = (+ : @(t))~*(g);
//
//------------------------------------------- DELAY FEEDBACK IN LOOP - FIXED ---
dflc(t,g) = (+ : @(t-1))~*(g) : mem;
//
//-------------------------------- DELAY FEEDBACK IN LOOP - FIXED - VARIABLE ---
dflcc(md,t,g) = (+ : de.delay(md, int(t-1)))~*(g) : mem;
//
//------------------------------------------------ SCHROEDER ALL-PASS FILTER ---
sapf(t,g) = _ <: *(-g)+(dflc(t,g)*(1-(g*g)));
apfmd(md,t,g) = _ <: *(-g)+(dflcc(t,g)*(1-(g*g)));
//
//---------------------------------------------------------------------- T60 ---
// For a feedback loop with open loop gain g, the sound level decay by
// -20*log(g) decibels for every trip around the feedback loop. Since every
// round trip takes t second, the time for a 60dB decay is
msT60(t,g) = (60/(-20*log10(g)))*t;
//process = msT60(0.1,0.708); // 2 seconds
//
//------------------------------------------------- INCREASE OF ECHO DENSITY ---
// The delay of each section is made about 1/3 of the preceding delay. Thus, the
// delay of the n-th unit will be t1(1/3)^n-1. The gains are most conveniently
// made equal to about 0.7. [...] The effective echo density of 5 loops in
// series will be approximately 81/t1. For t1 = 0.1 sec, the effective echo
// density will be 810 per second which is sufficiently close to the required
// 1000 per second. To avoid echo cancellation and superposition, it is
// advisable to use incommensurate delay ratios rather than the round number 3.
ied5 = sapf(5507,0.7) : sapf(1831,0.7) : sapf(613,0.7) : sapf(199,0.7) : sapf(67,0.7);
ied8 = sapf(5507,0.7) : sapf(1831,0.7) : sapf(613,0.7) : sapf(199,0.7) : sapf(67,0.7):
       sapf(23,0.7) : sapf(7,0.7) : sapf(2,0.7);
//
//---------- MIXING OF DIRECTSOUND AND REVERBERATION - NON-EXPONENTIAL DECAY ---
dflr(t,g) = (+ : de.delay(ma.SR/2, int(t-1)) : ied5)~*(g) : mem;
aprdw(t,g) = _ <: *(-g)+(dflr(t,g)*(1-(g*g)));
//
  //------------------------------------------------- THE COMB FILTER APPROACH ---
  // The values of the delays t1 through t4 are spread [...] between 30 and 45 ms
  // here in prime numbers at 48KHz from 1440 to 2160 samples.
  schrev = _ <: // to 4 parallel comb
    dflc(1447,0.812),
    dflc(1721,0.78),
    dflc(1873,0.76),
    dflc(2161,0.74) :>
    sapf(83,0.7) : sapf(229,0.7);
  // components in reverse order
  revsch = sapf(83,0.7) : sapf(229,0.7) <: // two allpass to 4 comb
    dflc(1447,0.812), dflc(1721,0.78), dflc(1873,0.76), dflc(2161,0.74);
  // commutability test
  //process = os.impulse <: schrev, (revsch :> _);
//
//----------------------------------- FREQUENCY-DEPENDENT REVERBERATION TIME ---
// If it is desired to make the reverberation time a function of frequency, the
// gains g1 through g4 in have to be made frequency dependent. For this, a
// simple RC-section in each feedback loop will suffice. In this manner further
// realism can be added to the artificial reverberation by making the
// reverberation time larger for the low frequencies. This trend of
// reverberation time with frequency is typical of many concert halls and
// cathedrals.
//
dflf(t,g,fc) = (+ : de.delay(ma.SR/2, int(t-1)))~scy.onepole(fc)*(g) : mem;
schfdrevt = _ <: // to 4 parallel comb
  dflf(1447,0.812,5000),
  dflf(1721,0.78,4000),
  dflf(1873,0.76,3000),
  dflf(2161,0.74,2000) :>
  sapf(83,0.7) : sapf(229,0.7);
//
//
//
// DA QUI IN POI DA SISTEMARE
//
//
//
//------------------------------------------------ AMBIOPHONIC REVERBERATION ---
matrix = sapf(47,0.708), sapf(41,0.708), sapf(31,0.708), sapf(23,0.708),
         sapf(17,0.708), sapf(11,0.708), sapf(5,0.708), sapf(2,0.708),
         sapf(3,0.708), sapf(7,0.708), sapf(13,0.708), sapf(19,0.708),
         sapf(29,0.708), sapf(37,0.708), sapf(43,0.708), sapf(53,0.708);

//ambiorev = revsch <: par(i, 4, _<:_,ma.neg) : matrix;

ambiorev = (revL <: phase), (revR <: phase) <: matrix
with{
  revL = sapf(281,0.708) : sapf(4051,0.708) : sapf(307,0.708) : sapf(881,0.708) <:
         dflc(4133,0.708), dflc(4157,0.708), dflc(7307,0.708), dflc(2803,0.708);
  revR = sapf(271,0.708) : sapf(4201,0.708) : sapf(311,0.708) : sapf(877,0.708) <:
         dflc(4111,0.708), dflc(4159,0.708), dflc(7309,0.708), dflc(2819,0.708);
  phase = par(i, 4, _<:_,ma.neg);
  matrix = sapf(47,0.708), sapf(41,0.708), sapf(31,0.708), sapf(23,0.708),
           sapf(17,0.708), sapf(11,0.708), sapf(5,0.708), sapf(2,0.708),
           sapf(3,0.708), sapf(7,0.708), sapf(13,0.708), sapf(19,0.708),
           sapf(29,0.708), sapf(37,0.708), sapf(43,0.708), sapf(53,0.708);
};
//process = ambiorev :> _,_;

// phi-tuned all-pass reverb
apphirev(N,t) = seq(i,N, sapf(int(t*(i+1)*phi),0.708));
// process = apphirev(53,61);
//process = _ <: apphirev(53,61), apphirev(53,59);

// unused
som(N) = (N*(N+1))/2;
apphirevn(N,t) = seq(i,N,sapf(int(t*(i+1)*phi),(i+1)*(1/som(N)))); //troppo asciutto
dapphirev(N,t,g,pd) =_ <: *(-g) + ((+ : @ (pd) : apphirev (N,t))~ *(g) : *(1-(g*g)));
//-----------------------------

// -----------------------------------------------------------------------------
// MOORER - SIGNAL PROCESSING ASPECTS OF COMPUTER MUSIC - A SURVEY - 1977
jmcomb(m,g) =  (+ : de.delay(ma.SR, m-1)) ~*(g) : mem;
jmapf(m,g) = _ <: _,_ : ((ma.neg+_ : *(g) <: _,_ ) , _ : _,+ : ro.crossnn(1) : de.delay(ma.SR, m-1),_)~_ : mem+_;

jmcosc(d,g,theta) = + ~ (@(d-1) <: *(2*g*(cos(theta))) + @(d)*(ma.neg(g*g)));
//process = os.impulse : jmcosc(1,0.708,a);

//process = os.impulse : jmapf(1,0.9);

jmapfosc(d,g,theta) = (+ <: z1(d,g,theta), *(g*g) : @(d-1),_,_)~*(ma.neg(g*g)) : mem,_,_:> _
with{
    z1(d,g,theta) = (+ : @(d-1)) ~ *(2*g*cos(theta)) : (mem <: _,*(ma.neg(2*g*cos(theta))));
};
//process = os.impulse : jmapfosc (1,1,a) * (0.03);
//process = os.impulse <: jmcombosc(1,1,a) * (0.03), jmapfosc(1,1,a) * (0.03);

// -----------------------------------------------------------------------------
// JON DATTORRO - EFFEC DESIGN PART 1. REVERBERATOR AND OTHER FILTERS - 1996

jondattorro_rev = pdly(0) : lp1p(bandwidth) : inputdiffusers <: tank
with{
  // reverberation parameters defaults
  excursion = hslider("[01]EXCURSION", 16, 0, 1024, 1) : int;
  decay = hslider("[02]DECAY", 0.5, 0, 1, 0.001) : si.smoo;
  dd1 = hslider("[03]DECAY DIFFUSION 1", 0.7, 0, 0.999, 0.001) : si.smoo;
  dd2 = hslider("[04]DECAY DIFFUSION 2", 0.5, 0, 0.999, 0.001) : si.smoo;
  id1 = hslider("[05]INPUT DIFFUSION 1", 0.750, 0, 0.999, 0.001) : si.smoo;
  id2 = hslider("[06]INPUT DIFFUSION 2", 0.625, 0, 0.999, 0.001) : si.smoo;
  bandwidth = hslider("[07]BANDWIDTH", 0.9995, 0.0001, 0.9999999, 0.0000001);
  damping = hslider("[08]DAMPING", 0.0005, 0, 0.999, 0.001);

  // predelay
  predelay = hslider("[00]PREDELAY", 0, 0, 8192, 1) : int;
  pdly(t) = de.delay(ma.SR/2,predelay);

  // filters
  lp1p(a) = *(a) : + ~ *(1-a);
  dflc(t,g) = (+ : de.delay(ma.SR/2,(t-1))) ~ *(g) : mem;
  apf(t,g) = _<: *(-g) + (dflc(t,g) *(1-(g*g)));

  // reverberators
  inputdiffusers = apf(142,id1) : apf(107,id1) : apf(379,id2) : apf(277,id2);
  xsec1(dmp) = (+ : apf(672+excursion,dd1) : @(4453) : lp1p(1-damping) : *(decay) : apf(1800,0.85) : @(3720) : *(decay));
  xsec2(dmp) = (+ : apf(908+excursion,dd2) : @(4217) : lp1p(1-damping) : *(decay) : apf(2656,0.85) : @(3163) : *(decay));
  xfbk = _,_;
  xroute(a,b,c,d) = a,c,b,d;
  tank = (xroute : xsec1(damping), xsec2(damping)) ~ xfbk;
};

aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
