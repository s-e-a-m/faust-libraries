// ---
// description: A library for the exploration of Michael Gerzon's algorithms
// ---
//
// <!-- LICENSE: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 -->
//
// # gerzon.lib
//
// ```text
declare name "Michael Gerzon - Library";
declare version "0.2";
declare author "Giuseppe Silvi";
declare license "CC3";

smg = library("seam.gerzon.lib");

// ```
//
// ## MICHAEL GERZON EARLY WORKS
//
// ### 1970 - SURROUND SOUND FROM 2-CHANNEL STEREO - SUM-AND-DIFFERENCE LAYOUT
//
// > ... a method of obtaining a genuine surround stereo effect from suitable conventional two-channel stereo recordings
//
// #### Reference
//
// * [Surround sound from 2-channel stereo - Hi-Fi News, August 1970](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1970-GERZON-Surround_sound_from_2-channel_stereo_A4.pdf)
// * [A year of surround-sound - Hi-Fi News, August 1971](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1971-GERZON-A_year_of_surround_sound_A4.pdf)
//
// ```text
//         F
//      •  |  •
//   •     |     •
// L ----- + ----- R
//   •     |     •
//      •  |  •
//         B
// ```
//
// Where the four outpust are respectively: Left - Right - Front - Back
//
// #### Code
//
// ```text
lrfb(L,R) = L,R,F,B
  with{
    F = (1/sqrt(2))*(L+R);
    B = (1/sqrt(2))*(L-R);
};
//
// process = lrfb;
// ```
//
// <!-- ******************************************************************** -->
//
// ### 1970 - SURROUND SOUND FROM 2-CHANNEL STEREO - IDEAL LS ARRANGEMENT
//
// > Another, more obvious, defect of ‘sum-and-difference’ four-speaker reproduction is the highly inconvenient seating arrangements, which are hardly suitable for the cosy domestic enjoyment of music.
//
// #### Reference
//
// * [Surround sound from 2-channel stereo - Hi-Fi News, August 1970](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1970-GERZON-Surround_sound_from_2-channel_stereo_A4.pdf)
// * [A year of surround-sound - Hi-Fi News, August 1971](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1971-GERZON-A_year_of_surround_sound_A4.pdf)
//
// ```text
//  B ---------- C
//  |            |
//  |            |
//  |            |
//  |            |
//  A ---------- D
// ```
//
// Where the four outpust are respectively: B,C,A,D
//
// #### Code
//
// ```text
lrsurrls(L,R) = B,C,A,D
  with{
    A = L*(0.924) - R*(0.383);
    B = L*(0.924) + R*(0.383);
    C = L*(0.383) + R*(0.924);
    D = L*(-0.383) + R*(0.924);
};
//
// process = lrsurrls;
// ```
//
// <!-- ******************************************************************** -->
//
// ### 1971 - A YEAR OF SURROUND SOUND
//
// > What is the precise effect of the rear spread control? With the few set-ups on which it has so far been tried, as one turns the control away from the pure ‘Hafler’ system, the sound seems to gain a subtle life and depth that the Hafler system lacks.
//
// #### Reference
//
// * [A year of surround-sound - Hi-Fi News, August 1971](https://github.com/s-e-a-m/References/blob/master/Gerzon-Michael/1970-GERZON-A_year_of_surround_sound_A4.pdf)
//
// ```text
//  L ---------- R
//  |            |
//  |            |
//  |            |
//  |            |
//  kL -------- kR
// ```
//
// Where:
//
//  * suffix rs is Rear Spread
//  * k is a number between 0.5 and 1.0
//
// #### Code
//
// ```text
lrsurrrs(L,R,k) = L,R,kL,kR
  with{
    kc = min(k,1):max(k,0.5);
    kL = (kc*L)-((1-kc)*R);
    kR = (kc*R)-((1-kc)*L);
};
//
// process = lrsurrrs;
// ```
//
// <!-- ******************************************************************** -->
//
// ## A B MODULES
//
// ### GENERIC AB MODULE WITHOUT SHELVING
//
// Converts a generic tetrahedral A-Format into Firts Order B-Format
//
// #### Reference
//
// [Ambisonics. Part two: Studio techniques Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)](https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf)
//
// #### Code
//
// ```text
abmodule(LFU,RFD,RBU,LBD) = W,X,Y,Z
	with{
    W = 0.5 * (LFU + RFD + RBU + LBD);
	  X = 0.5 * (LFU + RFD - RBU - LBD);
	  Y = 0.5 * (LFU - RFD - RBU + LBD);
	  Z = 0.5 * (LFU - RFD + RBU - LBD);
};
//
// process = abmodule;
// ```
//
abmodulex(LFU,RFD,RBU,LBD) = a0,a1,a2,a3
	with{
    a0 = 0.5 * (LFU + RFD + RBU + LBD);
	  a1 = 0.5 * (LFU - RFD - RBU + LBD);
	  a2 = 0.5 * (LFU - RFD + RBU - LBD);
    a3 = 0.5 * (LFU + RFD - RBU - LBD);
};
// <!-- ******************************************************************** -->
//
// ### GENERIC BA MODULE WITHOUT SHELVING
//
// Converts Firts Order B-Format into a generic tetrahedral A-Format
//
// #### Reference
//
// #### Code
//
// ```text
bamodule(W,X,Y,Z) = LFU,RFD,RBU,LBD
  with{
	  LFU = 0.5 * (W + X + Y + Z);
	  RFD = 0.5 * (W + X - Y - Z);
	  RBU = 0.5 * (W - X - Y + Z);
    LBD = 0.5 * (W - X + Y - Z);
};
//
// process = bamodule;
// ```
//
// <!-- ******************************************************************** -->
//
// ## ENCODERS
//
// ### MONO TO FIRST ORDER B-FORMAT ENCODER
//
// Encode a mono channel into Firts Order B-Format
//
// #### Reference
//
// 1975 - Ambisonics. Part two: Studio techniques. Reproduced from Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)
// 1983-gerzon-ambisonic-in-multichannel-broadcasting-and-video.pdf
// 1985-gerzon-ambisonic-in-multichannel-broadcasting-and-video
//
// #### Code
//
// ```text
//import("stdfaust.lib");
m2bfmt(m,a,e) = w(m),x(m,a,e),y(m,a,e),z(m,e)
  with{
    w(m) = m*(1/sqrt(2));
    x(m,a,e) = m*cos(a)*cos(e);
    y(m,a,e) = m*sin(a)*cos(e);
    z(m,e) = m*sin(e);
};
// a = hslider("azimuth", 0,0,360,1) : si.smoo;
// e = hslider("elevation", 0,0,360,1) : si.smoo;
// d2r = *(ma.PI/180);
// process = os.osc(1000),!,!,! <: m2bfmt(_,d2r(a),d2r(e));
// ```
//
// <!-- ******************************************************************** -->
//
// ## DECODERS
//
// ### PLANAR THREE CHANNEL B-FORMAT TO FOUR LOUDSPEAKER DECODER
//
// Converts planar B-Format to four loudspeaker setup for horizontal studio monitoring
//
// #### Reference
//
// [Ambisonics. Part two: Studio techniques Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975)](https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf)
//
// #### Code
//
// ```text
bdmodule = shelf : bamodule
  with{
    shelf = fi.highshelf(2,1.76,350),
            fi.highshelf(2,-1.25,350),
            fi.highshelf(2,-1.25,350),
            *(0.0);
};
//
// process = bdmodule;
// ```
//
// <!-- ******************************************************************** -->
//
// ### DECODER FOR BMX ENCODED SIGNALS
//
// Converts C-Format Stereo BMX encoded signals to four loudspeaker setup
//
// #### Reference
//
// (Ambisonics. Part two: Studio techniques Studio Sound, Vol. 17, pp 24-26, 28, 40 (August 1975))[https://www.michaelgerzonphotos.org.uk/articles/Ambisonics%202.pdf]
//
// #### Code
//
// ```text
bmxmodule(L,R) = (M+S),M,S,0 : bamodule
  with{
    M = 0.5*(L+R) : fi.lowshelf(2,-3.98,350);
    S = 0.5*(L-R) : fi.lowshelf(2,2.04,350);
};
//
// process = bmxmodule;
// ```
//
// <!-- ******************************************************************** -->
//
// ## UHJ UTILITIES
//
// #### Code
//
// ```text
lrS = nsum;
lrD = ndif;
j = fi.pospass(128, 35) : *(2), !;
// ```
//
// <!-- ******************************************************************** -->
//
// ## B-FORMAT TO UHJ LRTQ
//
// Ambisonic UHJ format is a development of the Ambisonic surround sound system designed to be compatible with mono and stereo media.
//
// #### Reference
//
// https://en.wikipedia.org/wiki/Ambisonic_UHJ_format
//
// #### Code
//
// ```text
bfmt2uhj(W,X,Y,Z) = L,R,T,Q
  with{
    S = (0.9396926*W) + (0.1855740*X);
    D = j((-0.3420201 * W) + (0.5098604 * X)) + (0.6554516 * Y);
    L = (S + D)/2;
    R = (S - D)/2;
    T = j((-0.1432 * W) + (0.6512 * X)) - (0.7071 * Y);
    Q = 0.9772 * Z
    ;
};
//
// j = fi.pospass(128, 35) : *(2), !;
//
// process = bfmt2uhj;
// ```
//
// <!-- ******************************************************************** -->
//
// #### Code
//
// ```text
bfmt2uhj_LR = bfmt2uhj:_,_,!,!;
//
// process = bfmt2uhj_LR;
// ```
//
// <!-- ******************************************************************** -->
//
// ### FOUR CHANNEL LRTQ UHJ TO B-FORMAT
//
// Ambisonic UHJ format is a development of the Ambisonic surround sound system designed to be compatible with mono and stereo media.
//
// #### Reference
//
// 1983-gerzon-ambisonic-in-multichannel-broadcasting-and-video
//
// #### Code
//
// ```text
uhj2bfmt(L,R,T,Q) = W,X,Y,Z
  with{
    lrS = nsum;
    lrD = ndif;
    W = (0.982*lrS) + j(0.197*((0.828*lrD)+(0.768*T)));
    X = (0.419*lrS) - j(0.828*(lrD+(0.768*T)));
    Y = j(0.187*lrS) + ((0.796*lrD)-(0.676*T));
    Z = 1.023*Q;
};
//
// j = fi.pospass(128, 35) : *(2), !;
//
// process = bmxmodule;
// ```
//
// <!-- ******************************************************************** -->
//
// ## TOOLS
//
// <!-- ******************************************************************** -->
//
// ### FIRST ORDER B-FORMAT ROTATE
//
// Rotate the Firts Order B-Format armonics set
//
// #### Reference
//
// #### Code
//
// ```text
brotate(W,X,Y,Z,a,e) = W1,X1,Y1,Z1
  with{
    W1 = W;
    X1 = (X*cos(a))-(Y*sin(e));
    Y1 = (Y*cos(a))-(X*sin(e));
    Z1 = Z;
};
//
// process = brotate(16,23);
// ```
//
// <!-- ******************************************************************** -->
//
// ### THREE CHANNEL STEREO
//
// Three channel pan-pot with low frequency phase correlation
//
// #### Reference
//
// [Studio Sound, June 1990](http://www.audiosignal.co.uk/Resources/Three_channels_A4.pdf)
//
// #### Code
//
// ```text
lrcpan(x,pot) = l,r,c
  with{
    plr = (pot) + (0.5);
    l = x*((1 - (plr)) * (pot) * (-2.0));
    c = x*(cos(pot*PIq));
    r = x*((plr) * (pot) * (2.0));
};
//
// pot = hslider("[unit:deg]", 0.0, -45.0, 45.0, 0.1) / (90.0) : si.smoo;
//
// process = lcrpan(pot);
// ```


//------------------------------------------------------------------------------
// GERZON FDN 1

mgfdn1(d,fb) = (+ : de.delay(ma.SR/2,d-1))~*(fb) : mem;
//process = os.impulse : mgfdn1(1,0.45);

mgfdn2(d1,d2,fb) = (+ <: de.delay(ma.SR/2,d1-1) +
                         de.delay(ma.SR/2,d2-1))~*(fb) : mem;
//process = os.impulse : mgfdn2(1,2,0.45);

mgfdn3(d1,d2,fb1,fb2,a11,a12,a21,a22) = (delays(d1,d2) :
                                        matrix(a11,a12,a21,a22))~fdbk(fb1,fb2) :
                                        mem , mem
with {
    routing(a,b,c,d) = a+c,b+d;
    delays(d1,d2) = routing : de.delay(ma.SR/2,d1-1), de.delay(ma.SR/2,d2-1);
    matrix(a11,a12,a21,a22) = _,_<: *(a11) + *(a12), *(a21) + *(a22);
    fdbk(fb1,fb2) = *(fb1), *(fb2);
};
//process = os.impulse <: mgfdn3(1,2,0.5,0.5,0.9,-0.5,-0.5,0.9);

mgfdn3o(d1,d2,fb1,fb2,theta) = (delays(d1,d2) : matrix(theta))~fdbk : mem : mem
with {
    routing(a,b,c,d) = a+c,b+d;
    delays(d1,d2) = routing : de.delay(ma.SR/2,d1-1), de.delay(ma.SR/2,d2-1);
    matrix(theta) = _,_<: *(cos(theta)) - *(sin(theta)),
                          *(sin(theta)) + *(cos(theta));
    fdbk = *(fb1), *(fb2);
};
//a = hslider("angle",45,0,360,1) : *(ma.PI/180);
//process = os.impulse <: mgfdn3o(1009,2579,0.4,0.4,a);

mgfdn4(d1,d2,d3,d4,fb1,fb2,fb3,fb4) = (delays : matrix)~fdbk
with {
    routing(a,b,c,d,e,f,g,h) = a+e,b+f,c+g,d+h;
    delays = routing : de.delay(ma.SR/2,d1-1), de.delay(ma.SR/2,d2-1),
                       de.delay(ma.SR/2,d3-1), de.delay(ma.SR/2,d4-1);
    matrix = ro.hadamard(4);
    fdbk = *(fb1), *(fb2), *(fb3), *(fb4);
};
//process = os.impulse <: mgfdn4(13,17,21,8209,0.1,0.2,0.3,0.5) :> _,_;

aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
