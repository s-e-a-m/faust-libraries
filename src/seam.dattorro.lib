declare name "SEAM Dattorro - Library";
declare version "0.2";
declare author "Daniele Annese";
declare author "Anthony Di Furia";
declare author "Giuseppe Silvi";
declare author "Francesco Vitucci";
declare license "CC3";

import("seam.lib");
//==============================================================================
//============= SCHROEDER - NATURAL SOUNDING ARTIFICIAL REVERBERATION - 1962 ===
//==============================================================================
//
//------------------------------------------------------ SAMPLE RATE ADAPTER ---
//--- jdSR = 29761 TO ACTUAL SAMPLERATE ----------------------------------------
adapt(val) = sre.adaptSR(sre.jdSR,val);
//process = adapt(4217);
//
//----------------------------------------------------- TWO MULTIPLY ALLPASS ---
//--- TO OBTAIN SCHROEDER'S IR INVERT g
//--- FIXED t
apf2m(t,g,x) = (x+_ <: @(max(0,t-1)),*(g))~(*(-g)) : mem+_;
//process = os.impulse : apf2m(1,1/sqrt(2));
//
//------------------------------------ TWO MULTIPLY ALLPASS WITH 2 EXTRA TAP ---
//--- FIXED t
apf2m2tap(t,tap1,tap2,g,x) = (x+_ <:
  @(max(0,t-1)),*(g),@(tap1),@(tap2))~(*(-g)) : mem+_,_,_;
//process = os.impulse : apf2m2tap(2656,1913,335,1/sqrt(2));
//
//------------------------------------ TWO MULTIPLY ALLPASS MODULATING DELAY ---
//--- VARIABLE t
apf2mex(t,g,ex,x) = (x+_ <:
  de.sdelay(ma.SR,512,(t-1)+(oscS*ex)),*(-g))~(*(g)) : mem+_;
//process = ba.pulsen(1,ma.SR/50) : apf2mex(adapt(908),ddiff1,exui);
//
//---------------------------------------------------------- INPUT DIFFUSION ---
inputDiffusion = +/2 : de.delay(mymax, pdly) :
  sfi.eavg2(bw) :
  apf2m(adapt(142),idif1) :
  apf2m(adapt(107),idif1) :
  apf2m(adapt(379),idif2) :
  apf2m(adapt(277),idif2);
//process = ba.pulsen(1,ma.SR/3) <: inputDiffusion;
//
//------------------------------------------------------------------- R TANK ---
r = apf2mex(adapt(908),ddiff1,exui) <:
  (@(adapt(4217)) : sfi.eavg2(damp) : *(decay) :
  apf2m2tap(adapt(2656),adapt(1913),adapt(335),ddiff2) : (_ <:
    @(adapt(3163)),
    @(adapt(1996)),
    @(adapt(121))),_,_),
    @(adapt(266)),
    @(adapt(2974)),
    @(adapt(2111));
//process = ba.pulsen(1,ma.SR/3) : r;
//
//------------------------------------------------------------------- L TANK ---
l = apf2mex(adapt(672),ddiff1,exui) <:
  (@(adapt(4453)) : sfi.eavg2(damp) : *(decay) :
  apf2m2tap(adapt(1800),adapt(187),adapt(1228),ddiff2) : (_ <:
    @(adapt(3720)),
    @(adapt(1066)),
    @(adapt(2673))),_,_),
    @(adapt(353)),
    @(adapt(3627)),
    @(adapt(1990));
//process = ba.pulsen(1,ma.SR/3) : l;
//process = ba.pulsen(1,ma.SR/3) <: l,r;
//
//------------------------------------------------------------ COMPLETE TANK ---
tank = _ <:
  (ro.cross(2),si.bus(2) :> l,r :
  _,ro.crossNM(7,1),si.bus(7))~(par(i,2,*(decay))) : si.block(2),si.bus(14);
//process = ba.pulsen(1,ma.SR/3) <: tank;
//
//---------------------------------------------------------- TAP ACCUMULATOR ---
accumulator = route(14,4,
                   (12,1),(13,1),(8,1),(10,2),(7,2),(3,2),(1,2), // LEFT
                   (5,3),(6,3),(2,3),(4,4),(14,4),(11,4),(9,4)) // RIGHT
                   : -*(0.6),-*(0.6);
//process = accumulator;
//
//------------------------------------------------- COMPLETE DATTORRO DESIGN ---
//process = dattorro;
//
//-------------------------------------------------------- UTILITIES GUI ECC ---
mymax = 96000;
pdly = vslider("[0]preDelay", 0, 0, mymax, 1); //si puÃ² impostare SR
decay = vslider("[1]decay", 0.5, 0, 0.99999, 0.00001) : si.smoo;
dDgroup(x) = hgroup("[2]Decay diffusion", x) : si.smoo;
ddiff1 = dDgroup(vslider("1", 0.7, 0, 0.999, 0.001));
ddiff2 = dDgroup(vslider("2", 0.5, 0.25, 0.5, 0.001)) : si.smoo;
iDgroup(x) = hgroup("[3]Input diffusion", x);
idif1 = iDgroup(vslider("1", 0.75, 0, 0.999, 0.001));
idif2 = iDgroup(vslider("2", 0.625, 0, 1, 0.001));
bw = vslider("[4]bandWidth", 0.7, 0, 0.9999999, 0.01);
damp = 1-vslider("[5]damping", 0.0005, 0, 1, 0.0001);
exgroup(x) = hgroup("[6]Excursion", x);
oscRadio = exgroup(vslider("Osc[style:radio{'Sine':0;'Tri':1;'Sqare':2}]",0, 0, 2, 1));
oscS = select3(oscRadio,os.osc(0.07),os.triangle(0.07),os.square(0.07));
exui = exgroup(vslider("Amp", 16, 0, 100, 0.001));
//
dattorro = hgroup("Dattorro Reverb", inputDiffusion : tank : accumulator);
