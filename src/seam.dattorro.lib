import("seam.lib");

// funzione per l'adattamento dei valori
adapt(val) = sre.adaptSR(sre.jdSR,val);

/*SLIDER-----------------------------------------------*/

mymax = 96000;
pdly = vslider("[0]preDelay", 0, 0, mymax, 1); //si pu√≤ impostare SR
decay = vslider("[1]decay", 0.5, 0, 0.99999, 0.00001) : si.smoo;
dDgroup(x) = hgroup("[2]Decay diffusion", x) : si.smoo;
ddiff1 = dDgroup(vslider("1", 0.7, 0, 0.999, 0.001));
ddiff2 = dDgroup(vslider("2", 0.5, 0.25, 0.5, 0.001)) : si.smoo;
iDgroup(x) = hgroup("[3]Input diffusion", x);
idif1 = iDgroup(vslider("1", 0.75, 0, 0.999, 0.001));
idif2 = iDgroup(vslider("2", 0.625, 0, 1, 0.001));
bw = vslider("[4]bandWidth", 0.7, 0, 0.9999999, 0.01);
damp = 1-vslider("[5]damping", 0.0005, 0, 1, 0.0001);
exgroup(x) = hgroup("[6]Excursion", x);
oscRadio = exgroup(vslider("Osc[style:radio{'Sine':0;'Tri':1;'Sqare':2}]",0, 0, 2, 1));
oscS = select3(oscRadio,os.osc(0.07),os.triangle(0.07),os.square(0.07));
exui = exgroup(vslider("Amp", 16, 0, 100, 0.001));
dattorro = hgroup("Dattorro Reverb",
            inputDiffusion : tank : tap : accumulator);

/*FILTRI-----------------------------------------------*/
//lp1p(a) = _*(a) : +~*(1-a);
//apf(idif, t) = (+ <: de.delay(mymax, t),*(idif) : _,_)~*(-idif) : mem,_ : +;
//process = os.impulse <: apf(1/sqrt(2),1),sjm.apf(1,1/sqrt(2));

//apf2(idif, t) = (ma.sub <: (de.delay(mymax, t) <: _,_,_),*(idif) : *(idif),_,+)~_ : !,_,_;
apf3(t,g,x) = (x+_ : *(-g) <: _+x, _ : del(t-1),_)~(0-_) : mx
with{
    del(t,x) = de.delay(ma.SR,t,x),x;
    mx(a,b,c) = b,mem(a),mem(a)+c;
};
//process = os.impulse <: apf2(1/sqrt(2),2656), apf2o(2656,1/sqrt(2)),sjm.apf(2656,1/sqrt(2));

apfm(idif, t, ex) = (+ : (*(idif) <: de.sdelay(mymax, 512, t+(oscS*ex)), _))~*(idif) : -;

/*-----------------------------------------------------*/

inputDiffusion = +/2 : de.delay(mymax, pdly) : sfi.eavg2(bw) : sjm.apf(adapt(142),idif1) : sjm.apf(adapt(107),idif1) : sjm.apf(adapt(379),idif2) : sjm.apf(adapt(277),idif2);
//process = os.impulse <: inputDiffusion;

r = apfm(ddiff1, adapt(908), exui) <: _, (de.delay(mymax, adapt(4217)) : sfi.eavg2(damp) : *(decay) : apf3(adapt(2656),ddiff2) : _,_, de.delay(mymax, adapt(3163)));
//process = r;

l = apfm(ddiff1, adapt(672), exui) <: _, (de.delay(mymax, adapt(4453)) : sfi.eavg2(damp) : *(decay) : apf3(adapt(1800),ddiff2) : _,_, de.delay(mymax, adapt(3720)));
//process = l;
//process = l,r;

//tank = _ <: (ro.cross(2),_,_ : _,ro.cross(2),_ : +,+ : r,l : mat)~(_*(decay),_*(decay)) : !,!,_,_,_,_,_,_;
tank = (ro.cross(2),si.bus(2) :> (l : ro.crossNM(3,1)), r : _, ro.crossNM(6,1))~(par(i,2,*(decay)));
process = _ <: tank;

mat = route(8,8,(1,3),(2,4),(3,5),(4,1),(5,6),(6,7),(7,8),(8,2));

tap = (_<: de.delay(mymax,adapt(266)),de.delay(mymax,adapt(2974)),de.delay(mymax,adapt(2111))),
(_ <: de.delay(mymax,adapt(1913)),de.delay(mymax,adapt(335))),
(_ <: de.delay(mymax,adapt(1996)),de.delay(mymax,adapt(121))),
(_ <: de.delay(mymax,adapt(1990)),de.delay(mymax,adapt(353)),de.delay(mymax,adapt(3627))),
(_ <: de.delay(mymax,adapt(187)),de.delay(mymax,adapt(1228))),
(_ <: de.delay(mymax,adapt(1066)),de.delay(mymax,adapt(2673)));

accumulator = route(14,4,(1,3),(2,3),(3,2),(4,4),(5,2),(6,3),(7,2),(8,4),(9,1),(10,1),(11,4),(12,2),(13,4),(14,1)) : par(i,4,*(0.6)) : -,- : ro.cross(2);

//process = dattorro;
