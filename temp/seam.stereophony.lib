//########################################################## stereophony.lib ###
//
// A library for sterophonic processing. Its official prefix is `st`.
//
// * MID-SIDE MATRIX
// * STEREO PAIRS
// * PANNING
// *
// *
//
//##############################################################################

/*******************************************************************************
Except where noted otherwise, Copyright (C) 2019-2020 by SEAM

GRAME LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with the GNU C Library; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a larger
FAUST program which directly or indirectly imports this library file and still
distribute the compiled code generated by the FAUST compiler, or a modified
version of this compiled code, under your own copyright and license. This
EXCEPTION TO THE LGPL LICENSE explicitly grants you the right to freely choose
the license for the resulting compiled code. In particular the resulting compiled
code has no obligation to be LGPL or GPL. For example you are free to choose a
commercial or closed source license or any other license if you decide so.
*******************************************************************************/

declare name "Faust Stereophony Library";
declare version "0.1";

sst = library("seam.stereophony.lib");

//========================================================== SUM DIFF MATRIX ===
//==============================================================================
//------------------------------------------------------------------------------
// NORMALIZED SUM BETWEEN TWO SIGNALS
//------------------------------------------------------------------------------
nsum = (_+_)/2; //0.618

//------------------------------------------------------------------------------
// NORMALIZED DIFFERENCE BETWEEN TWO SIGNALS
//------------------------------------------------------------------------------
ndif = (_-_)/2;

//------------------------------------------------------------------------------
// LR <-> MS MATRIX
//------------------------------------------------------------------------------
sdmx = _,_ <: nsum, ndif;

//==============================================================================
//=================================================== STEREO PAIRS & PANNING ===
//=============================================================== COINCIDENT ===
//==============================================================================
// MID-SIDE
//------------------------------------------------------------------------------
// The Mid-Side coincident pair polar description
// #### Reference
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is a mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third is the angular value expressed in radians -2pi > 0 > 2pi
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
midside(p,rad) = _ <: m, s
  with{
    m = _ <: (*(p)) + ((1-p)*(*(cos(rad))));
    s = *(sin(rad));
};
//------------------------------------------------------------------------------
// XY 90 DEGREES COINCIDENT PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third are the radians
// rad = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
// deg2rad is a seam.lib function
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
xy90(rad) = _ <: left,right
  with{
    left =  (*(sqrt(2))+(*(cos(rad)))+(*(sin(-rad))))/(2.83);
    right = (*(sqrt(2))+(*(cos(rad)))+(*(sin(rad))))/(2.83);
};

//------------------------------------------------------------------------------
// XY 90 DEGREES COINCIDENT PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third are the radians
// rad = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
// deg2rad is a seam.lib function
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
xy120(x,rad) = left,right
  with{
    left =  ((1*x)+(0.5*(x*(cos(rad))))+(0.866*(x*(sin(-rad)))))/2;
    right = ((1*x)+(0.5*(x*(cos(rad))))+(0.866*(x*(sin(rad)))))/2;
};

//------------------------------------------------------------------------------
// XY 90 DEGREES COINCIDENT PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third are the radians
// rad = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
// deg2rad is a seam.lib function
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
xy180(x,rad) = left,right
  with{
    left =  (0.5*x)+(0.5*(x*(sin(-rad))));
    right = (0.5*x)+(0.5*(x*(sin(rad))));
};

//------------------------------------------------------------------------------
// BLUMLEIN COINCIDENT PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third are the radians
// rad = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
// deg2rad is a seam.lib function
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
blumlein(x,rad) = left,right
  with{
    left =  0.707*((x*(cos(rad)))+(x*(sin(-rad))));
    right = 0.707*((x*(cos(rad)))-(x*(sin(-rad))));
};

//------------------------------------------------------------------------------
// ORTF PANNER
//------------------------------------------------------------------------------
// Mid-Side panpot with phase inntegrity of components
//
// #### Reference
//
// #### Usage
//
// ```
// _ : mspan(p,rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned, the second is the
// polar coefficient (1 for non-directional, 0.5 for cardioid, 0 for figure-8),
// the third are the radians
// rad = vslider("[01] Azimuth [style:knob]", 0, -180, 180, 0.1) : deg2rad : si.smoo;
// deg2rad is a seam.lib function
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
ortf(x,rad) = left,right
  with{
    d = 0.17;
    quad(k) = k*k;
    nrad = rad+ma.PI;
    delta(d,nrad) = sqrt(1-(d*cos(nrad))+quad(d)/4)-sqrt(1+(d*cos(nrad))+quad(d)/4);
    del = pm.l2s(delta);
    itdl = x : de.fdelay3(1024, max(del(d,nrad), 0) + 1);
    itdr = x : de.fdelay3(1014, max(-del(d,nrad), 0) + 1);
    left = ((1*itdl)+(0.573*(itdl*(cos(rad))))+(0.819*(itdl*(sin(-rad)))))/2;
    right = ((1*itdr)+(0.573*(itdr*(cos(rad))))+(0.819*(itdr*(sin(rad)))))/2;
};

//==============================================================================
//================================================================== PANNING ===
//==============================================================================
// MID-SIDE STEREO PANNING TO LEFT AND RIGHT LOUDSPEAKER LISTENING
//------------------------------------------------------------------------------
// Mid-Side panner with phase integrity of components to LR matrix
// #### Reference
// British Patent Specification 394, 325 - ALAN DOWER BLUMLEIN
// The invention also consists in a system of sound transmission wherein the
// sound is receive by two or more microphones, wherein at low frequencies
// difference in the phase of sound pressure at the microphone is reproduced as
// difference in volume at the loud speaker
//
// #### Usage
//
// ```
// _ : mspan_lr(p,rad) : _,_
// ```
//
// Where the input is the mono signal to be Left and Right panned
//
// Where the two outputs are respectively:
// Mid, Side
//
//------------------------------------------------------------------------------
mspan_lr(p,rad) = midside(p,rad) : sdmx;

//------------------------------------------------------------------------------
// CURTIS ROADS CONSTANT POWER PANNING
//------------------------------------------------------------------------------
// Constant Power Panning as described by Curtis Roads in Computer Music Tutorial
// #### Reference
// CMT pg460
//
// #### Usage
//
// ```
// _ : crcp(rad) : _,_
// ```
//
// Where the first input is the mono signal to be panned
//
// Where the two outputs are respectively:
// Left and Right
//
//------------------------------------------------------------------------------
crcppan(rad) = _ <: left,right
  with{
    left = _*((sqrt(2)/2)*(cos(rad)+sin(-rad)));
    right = _*((sqrt(2)/2)*(cos(rad)-sin(-rad)));
};

//------------------------------------------------------------------------------
// STEREO PANNING FOR TWO LEFT AND RIGHT LOUDSPEAKER LISTENING
//------------------------------------------------------------------------------
// Quadratic Amplitude Pannner
// #### Reference
//
// #### Usage
//
// ```
// _ : lrpanq(p) : _,_
// ```
//
// Where the input is the mono signal to be panned
//
// Where the two outputs are respectively:
// Left and Right
//
//------------------------------------------------------------------------------
lrquad(x,p) = left,right
  with{
    left = sqrt(1-p)*x;
    right = sqrt(p)*x;
};

aa = library("aanl.lib");
sf = library("all.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
co = library("compressors.lib");
de = library("delays.lib");
dm = library("demos.lib");
dx = library("dx7.lib");
en = library("envelopes.lib");
fd = library("fds.lib");
fi = library("filters.lib");
ho = library("hoa.lib");
it = library("interpolators.lib");
ma = library("maths.lib");
mi = library("mi.lib");
ef = library("misceffects.lib");
os = library("oscillators.lib");
no = library("noises.lib");
pf = library("phaflangers.lib");
pl = library("platform.lib");
pm = library("physmodels.lib");
qu = library("quantizers.lib");
rm = library("reducemaps.lib");
re = library("reverbs.lib");
ro = library("routes.lib");
sp = library("spats.lib");
si = library("signals.lib");
so = library("soundfiles.lib");
sy = library("synths.lib");
ve = library("vaeffects.lib");
vl = library("version.lib");
wa = library("webaudio.lib");
wd = library("wdmodels.lib");
